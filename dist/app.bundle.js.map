{"version":3,"file":"app.bundle.js","mappings":";;;;;AAAA;AACA;AACA;AACA,kBAAkB,MAAM;AACxB;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,eAAe;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI,IAAI,yBAAyB,KAAK,+BAA+B,IAAI,6BAA6B;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,6BAA6B;AACpF,iBAAiB;AACjB,qCAAqC,kCAAkC;AACvE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///./src/index.ts"],"sourcesContent":["const progresses = {};\nconst filesizeWithUnit = (size) => {\n    if (size < 1024) {\n        return `${size} B`;\n    }\n    size = size / 1024;\n    if (size < 1024) {\n        return `${size.toFixed(2)} KB`;\n    }\n    size = size / 1024;\n    if (size < 1024) {\n        return `${size.toFixed(2)} MB`;\n    }\n    size = size / 1024;\n    return `${size.toFixed(2)} GB`;\n};\nconst progressSpan = document.getElementById('progressSpan');\nconst statusSpan = document.getElementById('statusSpan');\nconst chatUl = document.getElementById('chatUl');\nconst chatTextarea = document.getElementById('chatTextarea');\nconst sendButton = document.getElementById('sendButton');\nlet interval = null;\nconst worker = new Worker('./dist/worker.bundle.js');\nworker.addEventListener('message', (e) => {\n    const { action, data } = e.data;\n    // For debug\n    console.log(action, data);\n    if (action === 'progressCallback') {\n        const arg = data;\n        if (arg.status === 'progress') {\n            const name = arg.file;\n            progresses[name] = {\n                progress: arg.progress,\n                loaded: arg.loaded,\n                total: arg.total\n            };\n            while (progressSpan.firstChild) {\n                progressSpan.firstChild.remove();\n            }\n            const ul = document.createElement('ul');\n            for (const key in progresses) {\n                const data = progresses[key];\n                const li = document.createElement('li');\n                li.innerText = `${key}: ${data.progress.toFixed(2)}% (${filesizeWithUnit(data.loaded)} / ${filesizeWithUnit(data.total)})`;\n                ul.appendChild(li);\n            }\n            progressSpan.appendChild(ul);\n        }\n        else if (arg.status === 'ready') {\n            statusSpan.innerText = 'Ready';\n            chatTextarea.addEventListener('keypress', e => {\n                // 13: Enter key\n                if (e.keyCode === 13 && !e.shiftKey) {\n                    e.preventDefault();\n                    sendButton.click();\n                }\n                e.stopPropagation();\n            });\n            chatTextarea.addEventListener('keyup', e => {\n                e.stopPropagation();\n            });\n            chatTextarea.addEventListener('keydown', e => {\n                e.stopPropagation();\n            });\n            sendButton.addEventListener('click', e => {\n                e.preventDefault();\n                let input = chatTextarea.value.trim();\n                if (!input) {\n                    return;\n                }\n                if (input.length > 250) {\n                    input = input.slice(0, 247) + '...';\n                }\n                chatTextarea.value = '';\n                chatTextarea.disabled = true;\n                sendButton.disabled = true;\n                const userLi = document.createElement('li');\n                userLi.classList.add('chat');\n                userLi.classList.add('userchat');\n                userLi.innerText = input;\n                chatUl.appendChild(userLi);\n                const aiLi = document.createElement('li');\n                aiLi.classList.add('chat');\n                aiLi.classList.add('aichat');\n                aiLi.innerText = 'processing...';\n                chatUl.appendChild(aiLi);\n                const now = performance.now();\n                interval = setInterval(() => {\n                    const elapsed = performance.now() - now;\n                    aiLi.innerText = `processing... (${(elapsed / 1000).toFixed(2)} sec)`;\n                }, 1000 / 15);\n                worker.postMessage({ action: 'text2text', data: input });\n            });\n            chatTextarea.disabled = false;\n            sendButton.disabled = false;\n        }\n    }\n    else if (action === 'text2textResult') {\n        clearInterval(interval);\n        interval = null;\n        // Hacky...\n        chatUl.lastChild.innerText = data;\n        chatTextarea.disabled = false;\n        sendButton.disabled = false;\n    }\n});\n"],"names":[],"sourceRoot":""}